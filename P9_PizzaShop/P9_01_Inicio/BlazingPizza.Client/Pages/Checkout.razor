@page "/checkout" 
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Resumen del pedido</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Mandar a...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" @onclick="PlaceOrder">
            Realizar pedido
        </button>

        <DataAnnotationsValidator /> <!-- Componentes para hacer la validacion del formulario-->
        <ValidationSummary />
    </EditForm>
</div>

@code {
    bool isSubmitting;
    
    async Task PlaceOrder() // Despues de mover a OrderState debemos redireccionar los Order
    {
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync("orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}