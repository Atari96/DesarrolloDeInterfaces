@page "/checkout" 
<!-- Con la etiqueta Authorize controlamos el acceso a los usuarios que dispongan deautorización-->
@attribute [Authorize]
@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <!-- El editform establece el campo del formulario que tendra que ser validado en el lado servidor-->
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Resumen del pedido</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Mandar a...</h4>
                <!-- Con el addressEditor inicializamos la direccion del pedido y la validacion de los datos-->
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" >
            Realizar pedido
        </button>

        <DataAnnotationsValidator /> <!-- Componentes para hacer la validacion del formulario-->
        <ValidationSummary />
    </EditForm>
</div>

@code {
    bool isSubmitting;

    // Cuando se inicializa se envia una petición de subscripcion
    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    // Se define el metodo de peticion de subscripcion, se define la suscripcion de las notificaciones push
    
    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        // Se comprueba que la suscripcion no sea nula, y envia la suscripcion al servidor para que pueda eviar notificaciones al usuario
        if (subscription is not null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
    
    async Task PlaceOrder() // Despues de mover a OrderState debemos redireccionar los Order
                            
    {
        isSubmitting = true;
        // Se define un nuevo pedido y se le asigna un nuevo Id del pedido, luego se resetea el estado del pedido
        // modificacion para manejar la excepcion en el caso de que el token de autorizacion no sea válido y que nos lleve a la pantalla de error.
        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}"); // Nos lleva al nuevo pedido que acabamos de hacer
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}