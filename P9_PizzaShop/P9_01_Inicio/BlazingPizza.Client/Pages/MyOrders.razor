@page "/myorders"
@attribute [Authorize]
@inject OrdersClient OrdersClient

<PageTitle>Don Pablo - Mis Pedidos</PageTitle>

<div class="main">
    <!-- Se incluye la plantilla de BlazingComponents, en donde se gestiona la información del estado de los pedidos, 
        haremos la carga de los datos de un pedido o de la lista de pedidos -->
    <TemplatedList Loader="@LoadOrders" ListGroupClass="orders-list">
        <Loading>Cargando...</Loading>
        <Empty>
            <h2>No hay pedidos</h2>
            <a class="btn btn-success" href="">Realizar un pedido</a>
        </Empty>
        <Item Context="item">
            <div class="col">
                <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                Items:
                <strong>@item.Order.Pizzas.Count()</strong>;
                Total price:
                <strong>€@item.Order.GetFormattedTotalPrice()</strong>
            </div>
            <div class="col">
                Status: <strong>@item.StatusText</strong>
            </div>
            <div class="col flex-grow-0">
                <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                    Track &gt;
                </a>
            </div>
        </Item>
    </TemplatedList>
</div>

@code {
    IEnumerable<OrderWithStatus>? ordersWithStatus;
    // modificacion para manejar la excepcion en el caso de que el token de autorizacion no sea válido y que nos lleve a la pantalla de error.
    // El metodo devuelve el pedido junto con el estado
    async Task<IEnumerable<OrderWithStatus>> LoadOrders()
    {
        var ordersWithStatus = Enumerable.Empty<OrderWithStatus>();
        try
        {
            ordersWithStatus = await OrdersClient.GetOrders();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return ordersWithStatus;
    }
}
