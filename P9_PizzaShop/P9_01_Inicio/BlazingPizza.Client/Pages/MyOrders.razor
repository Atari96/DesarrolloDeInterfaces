@page "/myorders"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject OrdersClient OrdersClient

<PageTitle>Don Pablo - Mis Pedidos</PageTitle>

<div class="main">
    @if (ordersWithStatus is null)
    {
        <text>Cargando...</text>
    }
    else if (!ordersWithStatus.Any())
    {
        <h2>No hay pedidos</h2>
        <a class="btn btn-success" href="">Realizar un pedido</a>
    }
    else
    {
        <div class="list-group orders-list">    
            @foreach (var item in ordersWithStatus)     // Listado de pedidos
            {
                <div class="list-group-item">
                    <div class="col">
                        <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                        Items:
                        <strong>@item.Order.Pizzas.Count()</strong>;
                        Precio total:
                        <strong>£@item.Order.GetFormattedTotalPrice()</strong>
                    </div>
                    <div class="col">
                        Status: <strong>@item.StatusText</strong>
                    </div>
                    <div class="col flex-grow-0">
                        <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                            Estado &gt;
                        </a>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<OrderWithStatus>? ordersWithStatus;

    protected override async Task OnParametersSetAsync()
    // modificacion para manejar la excepcion en el caso de que el token de autorizacion no sea válido y que nos lleve a la pantalla de error.
    {
        try
        {
            ordersWithStatus = await OrdersClient.GetOrders();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
