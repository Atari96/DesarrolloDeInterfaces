@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState // Inyeccion para poder guardar el estado del pedido aunque no hagamos el pedido //
@inject NavigationManager NavigationManager

<div class="main">      
    <ul class="pizza-cards">
        @if (specials is not null)  // Aqui serializaremos la informacion de las pizzas especiales y mostraremos en cards
        {
            @foreach (var special in specials) // Recorremos las plantillas de pizzas y extraemos nombres, descrip y precios
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu pedido</h2>

            @foreach (var configuredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para empezar</div>
    }

    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Pedir >
        </a>
    </div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}


@code {
    List<PizzaSpecial>? specials;
    Order Order => OrderState.Order;

    protected override async Task OnInitializedAsync() // Incializamos y recogemos los especiales
    {
        specials = await HttpClient.GetFromJsonAsync("specials", BlazingPizza.OrderContext.Default.ListPizzaSpecial);
    }

    /*void ShowConfigurePizzaDialog(PizzaSpecial special) ESTE METODO ES MOVIDO A OrderState.cs en el paso 4
                {
                configuringPizza = new Pizza()
                {
                Special = special,
                SpecialId = special.Id,
            Size = Pizza.DefaultSize,
        Toppings = new List<PizzaTopping>(),
    };

    showingConfigureDialog = true;
    }*/

    /*void CancelConfigurePizzaDialog() ESTE METODO ES MOVIDO A OrderState.cs
        {
        configuringPizza = null;
    showingConfigureDialog = false;
    }*/

    /*void ConfirmConfigurePizzaDialog() ESTE METODO ES MOVIDO A OrderState.cs
        {
        if (configuringPizza is not null)
            {
            order.Pizzas.Add(configuringPizza);
        configuringPizza = null;
        }

        showingConfigureDialog = false;
    }*/

    /*void RemoveConfiguredPizza(Pizza pizza) ESTE METODO ES MOVIDO A OrderState.cs
        {
        order.Pizzas.Remove(pizza);
    }*/

    
}
