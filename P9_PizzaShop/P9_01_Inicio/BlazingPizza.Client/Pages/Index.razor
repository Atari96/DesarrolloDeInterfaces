@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState // Inyeccion para poder guardar el estado del pedido aunque no hagamos el pedido //

@inject IJSRuntime JS

@*<summary>
    Inyeccion para poder guardar el estado del pedido aunque no hagamos el pedido
    Aqui serializaremos la informacion de las pizzas especiales y mostraremos en cards
    Recorremos las plantillas de pizzas y extraemos nombres, descrip y precios
    Incluimos la plantilla del componente que hemos hecho en la etapa 8, donde hacemos una llamada al componente
    Con el Oncancel hacemos que se oculte, y con el OnConfirm que se muestre
    Incializamos y recogemos los especiales
</summary>*@



<div class="main">      
    <ul class="pizza-cards">
        
        @if (specials is not null)   // Aqui serializaremos la informacion de las pizzas especiales y mostraremos en cards
        { // Con @ indicamos que va a ser codigo de csharp que utilizaremos para obtener la informacion, mientras qyue lo pintaremos con html
            // Recorremos las plantillas de pizzas y extraemos nombres, descrip y precios
            @foreach (var special in specials) 
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu pedido</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una pizza<br>para empezar</div>
    }

    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Pedir >
        </a>
    </div>
</div>

<!-- Incluimos la plantilla del componente que hemos hecho en la etapa 8, donde hacemos una llamada al componente-->
<!-- Con el Oncancel hacemos que se oculte, y con el OnConfirm que se muestre-->
<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza" 
        OnCancel="OrderState.CancelConfigurePizzaDialog" 
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
</TemplatedDialog>


@code {
    List<PizzaSpecial>? specials;
    Order Order => OrderState.Order;

    protected override async Task OnInitializedAsync() // Incializamos y recogemos los especiales
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JS.Confirm($"Remove {configuredPizza.Special?.Name} pizza from the order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }


}
